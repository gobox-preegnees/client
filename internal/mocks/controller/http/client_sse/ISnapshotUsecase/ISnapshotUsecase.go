// Code generated by MockGen. DO NOT EDIT.
// Source: client_sse.go

// Package mock_http is a generated GoMock package.
package mock_http

import (
	reflect "reflect"

	entity "github.com/gobox-preegnees/gobox-client/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockISnapshotUsecase is a mock of ISnapshotUsecase interface.
type MockISnapshotUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockISnapshotUsecaseMockRecorder
}

// MockISnapshotUsecaseMockRecorder is the mock recorder for MockISnapshotUsecase.
type MockISnapshotUsecaseMockRecorder struct {
	mock *MockISnapshotUsecase
}

// NewMockISnapshotUsecase creates a new mock instance.
func NewMockISnapshotUsecase(ctrl *gomock.Controller) *MockISnapshotUsecase {
	mock := &MockISnapshotUsecase{ctrl: ctrl}
	mock.recorder = &MockISnapshotUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISnapshotUsecase) EXPECT() *MockISnapshotUsecaseMockRecorder {
	return m.recorder
}

// GetCurrentRequestId mocks base method.
func (m *MockISnapshotUsecase) GetCurrentRequestId() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRequestId")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCurrentRequestId indicates an expected call of GetCurrentRequestId.
func (mr *MockISnapshotUsecaseMockRecorder) GetCurrentRequestId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRequestId", reflect.TypeOf((*MockISnapshotUsecase)(nil).GetCurrentRequestId))
}

// MockIConsistencyUsecase is a mock of IConsistencyUsecase interface.
type MockIConsistencyUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIConsistencyUsecaseMockRecorder
}

// MockIConsistencyUsecaseMockRecorder is the mock recorder for MockIConsistencyUsecase.
type MockIConsistencyUsecaseMockRecorder struct {
	mock *MockIConsistencyUsecase
}

// NewMockIConsistencyUsecase creates a new mock instance.
func NewMockIConsistencyUsecase(ctrl *gomock.Controller) *MockIConsistencyUsecase {
	mock := &MockIConsistencyUsecase{ctrl: ctrl}
	mock.recorder = &MockIConsistencyUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConsistencyUsecase) EXPECT() *MockIConsistencyUsecaseMockRecorder {
	return m.recorder
}

// ApplyConsistency mocks base method.
func (m *MockIConsistencyUsecase) ApplyConsistency(arg0 entity.Consistency) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyConsistency", arg0)
}

// ApplyConsistency indicates an expected call of ApplyConsistency.
func (mr *MockIConsistencyUsecaseMockRecorder) ApplyConsistency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConsistency", reflect.TypeOf((*MockIConsistencyUsecase)(nil).ApplyConsistency), arg0)
}
